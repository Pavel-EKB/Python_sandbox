print ('1. Объединение (union):')
# Зададим исходно два множества (скопировать перед каждым примером ниже)
a = {'a', 'b'}
b = {    'b', 'c'}  # отступ перед b для наглядности
c = a.union(b)     # c = b.union(a) даст такой же результат
# c = a + b        # Обычное объединение оператором + не работает
           # TypeError: unsupported operand type(s) for +: 'set' and 'set'
c = a | b          # Альтернативная форма записи объединения
print(c)       # {'a', 'c', 'b'}

print ('2. Пересечение (intersection):')
a = {'a', 'b'}
b = {    'b', 'c'}  # отступ перед b для наглядности
c = a.intersection(b)    # c = b.intersection(a) даст такой же результат
c = a & b                # Альтернативная форма записи пересечения
print(c)                 # {'b'}

print ('\t2.1 Пересечение более 2-х множеств сразу:')
a = {'a', 'b'}
b = {     'b', 'c'}
c = {    'b', 'd'}
d = a.intersection(b, c)    # Первый вариант записи
d = set.intersection(a, b, c)   # Второй вариант записи (более наглядный)
print(d)                        # {'b'}
print ('3. Разница (difference):')
a = {'a', 'b'}
b = {    'b', 'c'}  # отступ перед b для наглядности
c = a.difference(b)      # c = a - b другой способ записи дающий тот же результат
print(c)                 # {'a'}
c = b.difference(a)      # c = b - a другой способ записи дающий тот же результат
print(c)                 # {'c'}
print ('4. Симметричная разница:')
a = {'a', 'b'}
b = {    'b', 'c'}  # отступ перед b для наглядности
c = b.symmetric_difference(a)
# c = a.symmetric_difference(b)       # даст такой же результат
c = b ^ a                             # Альтернативная форма записи симметричной разницы
print(c)                      # {'a', 'c'}
