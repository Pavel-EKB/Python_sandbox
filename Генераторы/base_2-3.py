# 2.1 Базовый синтаксис
print('2.1 Базовый синтаксис')
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]    # Пусть у нас есть исходный список
list_b = [x for x in list_a]           # Создадим новый список используя генератор списка
print(list_b)                          # [-2, -1, 0, 1, 2, 3, 4, 5]
print(list_a is list_b)                # False - это разные объекты!

# 2.2 Добавляем условие для фильтрации
# if x % 2 == 0 - остаток от деления на 2 равен нулю - число четное
print('\n2.2 Добавляем условие для фильтрации')
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
list_b = [x for x in list_a if x % 2 == 0]
print(list_b)   # [-2, 0, 2, 4]

#Несколько условий, комбинируя их логическими операторами
print('\n\tНесколько условий, комбинируя их логическими операторами')
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
list_b = [x for x in list_a if x % 2 == 0 and x > 0]
# берем те x, которые одновременно четные и больше нуля
print(list_b)   # [2, 4]

# 2.3 Добавляем обработку элемента в выражении
print('\n2.3 Добавляем обработку элемента в выражении')
print('\tПосчитать квадраты значений каждого элемента:')
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
list_b = [x**2 for x in list_a]
print(list_b)   # [4, 1, 0, 1, 4, 9, 16, 25]

print('\n\tПосчитать длины строк c помощью функции len()')
list_a = ['a', 'abc', 'abcde']
list_b = [len(x) for x in list_a]
print(list_b)   # [1, 3, 5]

#2.4 Ветвление выражения
print('\n2.4 Ветвление выражения')
#В данном случае if-else это не фильтр перед выполнением выражения,
#а ветвление самого выражения, то есть переменная уже прошла фильтр,
#но в зависимости от условия может быть обработана по-разному!
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
list_b = [x if x < 0 else x**2 for x in list_a]
# Если x-отрицательное - берем x, в остальных случаях - берем квадрат x
print(list_b)   # [-2, -1, 0, 1, 4, 9, 16, 25]

#Никто не запрещает комбинировать фильтрацию и ветвление:
print('\n\tФильтрация и ветвление:')
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
list_b = [x**3 if x < 0 else x**2 for x in list_a if x % 2 == 0]
# вначале фильтр пропускает в выражение только четные значения
# после этого ветвление в выражении для отрицательных возводит в куб, а для остальных в квадрат
print(list_b)   # [-8, 0, 4, 16]

#Аналоги в виде цикла for и в виде функций
#сделаем из списка чисел список квадратов четных
#чисел и решим ее с помощью трех разных подходов:
#3.1 Решение с помощью генератора списка
print('\n3.1 Решение с помощью генератора списка')
numbers = range(10)
squared_evens = [n ** 2 for n in numbers if n % 2 == 0]
print(squared_evens)   # [0, 4, 16, 36, 64]

print('\n3.2. то же решение c помощью цикла for')
#Каждый генератор выражений можно переписать в виде цикла for,
#но не каждый цикл for можно представить в виде такого выражения.
numbers = range(10)
squared_evens = []
for n in numbers:
    if n % 2 == 0:
        squared_evens.append(n ** 2)
print(squared_evens)   # [0, 4, 16, 36, 64]

print('\n3.3. Решение с помощью функций.')
#Можно применять и более старые функциональные подходы для решения тех же задач,
#комбинируя map(), lambda и filter().
numbers = range(10)
squared_evens = map(lambda n: n ** 2, filter(lambda n: n % 2 == 0, numbers))
print(squared_evens)         # <map object at 0x7f661e5dba20>
print(list(squared_evens))   # [0, 4, 16, 36, 64]
# Примечание: в Python 2 в переменной squared_evens окажется сразу список,
#а в Python 3 «map object», который мы превращаем в список с помощью list()
