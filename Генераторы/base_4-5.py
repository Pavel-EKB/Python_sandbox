#4. Выражения-генераторы
#выдают элемент по-одному, не загружая в память сразу всю коллекцию
#Пример выражения-генератора:
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
my_gen = (i for i in list_a)    # выражение-генератор
print(next(my_gen))     # -2 - получаем очередной элемент генератора
print(next(my_gen))     # -1 - получаем очередной элемент генератора

#5. Генерация стандартных коллекций
#5.1 Создание коллекций из выражения-генератора
#Создание коллекций из выражения-генератора с помощью функций list(), tuple(), set(), frozenset()
print('\n5.1 Создание коллекций из выражения-генератора')
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
my_list = list(i for i in list_a)
print(my_list)          # [-2, -1, 0, 1, 2, 3, 4, 5]

#5.2 Специальный синтаксис генераторов коллекций
print('\n5.2 Специальный синтаксис генераторов коллекций')
print('\n\tГенератор списка (list comprehension)')
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
my_list = [i for i in list_a]
print(my_list)          # [-2, -1, 0, 1, 2, 3, 4, 5]

print('\tГенератор множества (set comprehension)')
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
my_set= {i for i in list_a}
print(my_set)       # {0, 1, 2, 3, 4, 5, -1, -2} - порядок случаен

print('\tГенератор словаря (dictionary comprehension). Переворачивание словаря')
dict_abc = {'a': 1, 'b': 2, 'c': 3, 'd': 3}
dict_123 = {k: v for v, k in dict_abc.items()}
print (dict_123)

print('\tСловарь из списка')
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
dict_a = {k: k**2 for k in list_a}
print (dict_a)

#выражение-генератор
dict_gen = ((x, x ** 2) for x in list_a)    # Корректный вариант генератора-выражения для словаря
dict_a = dict((x, x ** 2) for x in list_a)  # Корректный вариант синтаксиса от @longclaps